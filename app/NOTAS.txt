
## Exemplo de chef para testar entrar e sair:

ainsley_harriot@email.com
senha: 123456

############################# HEROKU POSTGRES

Obs: OBVIAMENTE O COMANDO: heroku rake db:migrate SÓ VAI
FUNCIANAR APÓS O ARQUIVO MIGRATION SER CRIADO LOCALMENTE
E DEVIDAMENTE ENVIADO AO HEROKU PELO git push heroku master

Obs: Ao usar "heroku rake db:migrate", todas as tabelas são criadas normalmente
porem ainda não consegui uma forma de escrever um seed.rb que assim
ao executar "heroku rake db:seed" possa também passar as tupla criadas localmente
para o banco remoto do heroku.

Obs; Posso acessar o banco do heroku normalmente com "heroko pg:psql" e visualizar todas as tabelas "\dt"
bem como seu conteúdos

Esse comando fáz o papel do seed, mas para isso devo resetar o meu banco remoto chamado "DATABASE_URL"
o que não é aconselhável ao menos que queira se cria-lo apenas uma veze pronto.

heroku pg:push ruby-getting-started_development DATABASE_URL --app secret-anchorage-33873


OBS: Mais eficiente por enquanto: 
"heroku run rails console"
e adiciona as tuplas de forma igual as adicionadas
localmento pelo tradicional rails c

criando rapidamente:

#chefs

c = Chef.create(chefname: "Raul Creed", email: "raulcreed@email.com")

d = Chef.create(chefname: "Real Mayer", email: "real_mayer@email.com")

#recipes

r = Recipe.create(name: "Vegetable saute", summary: "Best dish Ever", description: "Add vegetables, add oil, coock for 20 minutes", chef_id: 1)

s = Recipe.create(name: "Potato Salad", summary: "Best potato Salad Ever", description: "Add mayo, add potatos, add some onions", chef_id: 2)


Exemplo de alteração de tabela para caso de erro
no console do heroku, ou no postgres local porém, 
no postgres local podemos apenas usar o pgadmin...

alter table recipes drop column picure;


####################################### MANY TO MANY ASSOCIATIONS:

Tudo no video 61 para explicações usando rails console
